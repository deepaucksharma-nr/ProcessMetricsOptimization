apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nrdot-collector-host
  namespace: observability
  labels:
    app: nrdot-collector-host
spec:
  selector:
    matchLabels:
      app: nrdot-collector-host
  template:
    metadata:
      labels:
        app: nrdot-collector-host
    spec:
      serviceAccountName: nrdot-collector
      containers:
      - name: collector
        image: newrelic/nrdot-collector-host:1.1.0
        securityContext:
          runAsUser: 0
        env:
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: newrelic-license
              key: NEW_RELIC_LICENSE_KEY
        - name: HOST_ROOT_PATH
          value: /hostfs
        - name: DEMO_ID
          value: "k8s-$(NODE_NAME)"
        - name: NEW_RELIC_METADATA_DEMO_ID
          value: "k8s-$(NODE_NAME)"
        - name: NEW_RELIC_DISPLAY_NAME 
          value: "k8s-$(NODE_NAME)-$(PROFILE)"
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: delta
        - name: OTEL_EXPORTER_OTLP_COMPRESSION
          value: zstd
        # Profile selection based on env var
        - name: PROFILE  # This is set from a ConfigMap or directly
          value: "balanced"
        - name: NR_USE_ULTRA
          value: "false"
        - name: NR_USE_BALANCED
          value: "true"
        - name: NR_USE_OPTIMIZED
          value: "false"
        - name: NR_USE_LEAN
          value: "false"
        - name: NR_USE_MICRO
          value: "false"
        # Resource settings
        - name: MEM_LIMIT_MIB
          value: "256"
        # Filter thresholds
        - name: IDLE_CPU_THRESHOLD
          value: "0.005"
        - name: IDLE_RSS_THRESHOLD
          value: "31457280" # 30MB
        - name: IDLE_CPU_THRESHOLD_LEAN_MICRO
          value: "0.05"
        - name: IDLE_RSS_THRESHOLD_LEAN_MICRO
          value: "52428800" # 50MB
        volumeMounts:
        - name: hostfs
          mountPath: /hostfs
          readOnly: true
        - name: config
          mountPath: /etc/nrdot-collector-host/config.yaml
          subPath: config.yaml
          readOnly: true
        resources:
          limits:
            memory: 320Mi
          requests:
            cpu: 100m
            memory: 200Mi
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 20
      volumes:
      - name: hostfs
        hostPath:
          path: /
      - name: config
        configMap:
          name: profiles-collector-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nrdot-collector
  namespace: observability
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: profiles-collector-config
  namespace: observability
data:
  config.yaml: |
    extensions:
      health_check: {}

    receivers:
      # --- ULTRA Profile Receiver (5s, full process detail) ---
      hostmetrics/ultra:
        root_path: ${env:HOST_ROOT_PATH:-/hostfs}
        collection_interval: 5s
        scrapers:
          process:
            metrics:
              process.cpu.utilization: {enabled: true}
              process.cpu.time: {enabled: true}
              process.memory.usage: {enabled: true}
              process.memory.utilization: {enabled: true}
              process.disk.io: {enabled: true}
              process.disk.operations: {enabled: true}
              process.disk.operation_time: {enabled: true}
              process.threads: {enabled: true}
              process.open_fds: {enabled: true}
          processes: {}

      # --- BALANCED Profile Receiver (30s, core process types) ---
      hostmetrics/balanced:
        root_path: ${env:HOST_ROOT_PATH:-/hostfs}
        collection_interval: 30s
        scrapers:
          process:
            metrics:
              process.cpu.utilization: {enabled: true}
              process.memory.usage: {enabled: true}
              process.threads: {enabled: false}
              process.open_fds: {enabled: false}
          processes: {}

      # --- OPTIMIZED Profile Receiver (60s, core process types) ---
      hostmetrics/optimized:
        root_path: ${env:HOST_ROOT_PATH:-/hostfs}
        collection_interval: 60s
        scrapers:
          process:
            metrics:
              process.cpu.utilization: {enabled: true}
              process.memory.usage: {enabled: true}
              process.threads: {enabled: false}
              process.open_fds: {enabled: false}
          processes: {}

      # --- LEAN Profile Receiver (120s, minimal CPU % & RSS only) ---
      hostmetrics/lean:
        root_path: ${env:HOST_ROOT_PATH:-/hostfs}
        collection_interval: 120s
        scrapers:
          process:
            metrics:
              process.cpu.utilization: {enabled: true}
              process.memory.usage: {enabled: true}
            include: {match_type: regexp, names: [".*"]}
            exclude: {match_type: regexp, names: ["$^"]}
          processes: {}

      # --- MICRO Profile Receiver (300s, minimal CPU % & RSS only) ---
      hostmetrics/micro:
        root_path: ${env:HOST_ROOT_PATH:-/hostfs}
        collection_interval: 300s
        scrapers:
          process:
            metrics:
              process.cpu.utilization: {enabled: true}
              process.memory.usage: {enabled: true}
            include: {match_type: regexp, names: [".*"]}
            exclude: {match_type: regexp, names: ["$^"]}
          processes: {}

    processors:
      # --- SHARED BASE PROCESSORS ---
      memory_limiter:
        limit_mib: ${env:MEM_LIMIT_MIB:-256}
        check_interval: 1s

      resourcedetection:
        detectors: ["system"]
        system: {hostname_sources: ["os"]}

      resourcedetection/cloud:
        detectors: ["gcp", "ec2", "azure"]
        timeout: 2s

      resourcedetection/env:
        detectors: ["env"]
        timeout: 2s
        override: true

      batch: {}

      # --- PROFILE TAGGING ---
      attributes/tag_ultra:
        actions:
          - {key: benchmark.profile, value: ultra, action: upsert}
          - {key: benchmark.demo_id, value: ${env:DEMO_ID:-k8s-demo}, action: upsert}

      attributes/tag_balanced:
        actions:
          - {key: benchmark.profile, value: balanced, action: upsert}
          - {key: benchmark.demo_id, value: ${env:DEMO_ID:-k8s-demo}, action: upsert}

      attributes/tag_optimized:
        actions:
          - {key: benchmark.profile, value: optimized, action: upsert}
          - {key: benchmark.demo_id, value: ${env:DEMO_ID:-k8s-demo}, action: upsert}

      attributes/tag_lean:
        actions:
          - {key: benchmark.profile, value: lean, action: upsert}
          - {key: benchmark.demo_id, value: ${env:DEMO_ID:-k8s-demo}, action: upsert}

      attributes/tag_micro:
        actions:
          - {key: benchmark.profile, value: micro, action: upsert}
          - {key: benchmark.demo_id, value: ${env:DEMO_ID:-k8s-demo}, action: upsert}

      # --- PROCESSORS: BALANCED Profile ---
      attributes/balanced_drop_long_cli:
        actions:
          - {key: process.command_line, action: delete}

      filter/balanced_idle_gate:
        metrics:
          datapoint:
            - 'metric.name == "process.cpu.utilization" and value_double < ${env:IDLE_CPU_THRESHOLD:-0.005}'
            - 'metric.name == "process.memory.usage" and value_int < ${env:IDLE_RSS_THRESHOLD:-31457280}'

      # --- PROCESSORS: OPTIMIZED Profile ---
      attributes/optim_drop_pid_and_cli:
        actions:
          - {key: process.pid, action: delete}
          - {key: process.command_line, action: delete}

      metricstransform/optim_aggregate_exe:
        transforms:
          - include: ^process\..*
            match_type: regexp
            action: update
            operations:
              - action: aggregate_labels
                label_set: [process.executable.name]
                aggregation_type: sum

      filter/optim_idle_gate:
        metrics:
          datapoint:
            - 'metric.name == "process.cpu.utilization" and value_double < ${env:IDLE_CPU_THRESHOLD:-0.005}'
            - 'metric.name == "process.memory.usage" and value_int < ${env:IDLE_RSS_THRESHOLD:-31457280}'

      # --- PROCESSORS: LEAN & MICRO Profiles ---
      attributes/lean_micro_drop_pid_and_cli:
        actions:
          - {key: process.pid, action: delete}
          - {key: process.command_line, action: delete}

      metricstransform/lean_micro_aggregate_exe:
        transforms:
          - include: ^process\..*
            match_type: regexp
            action: update
            operations:
              - action: aggregate_labels
                label_set: [process.executable.name]
                aggregation_type: sum

      filter/lean_micro_slo_value_gate:
        metrics:
          datapoint:
            - 'metric.name == "process.cpu.utilization" and value_double < ${env:IDLE_CPU_THRESHOLD_LEAN_MICRO:-0.05}'
            - 'metric.name == "process.memory.usage" and value_int < ${env:IDLE_RSS_THRESHOLD_LEAN_MICRO:-52428800}'

    exporters:
      otlphttp:
        endpoint: ${env:OTEL_EXPORTER_OTLP_ENDPOINT:-https://otlp.nr-data.net}
        headers:
          api-key: ${env:NEW_RELIC_LICENSE_KEY}
        compression: ${env:OTEL_EXPORTER_OTLP_COMPRESSION:-zstd}

    service:
      extensions: [health_check]
      pipelines:
        # --- ULTRA Profile Pipeline ---
        metrics/ultra:
          if: ${env:NR_USE_ULTRA:-false}
          receivers: [hostmetrics/ultra]
          processors: 
            - memory_limiter
            - resourcedetection
            - resourcedetection/cloud
            - resourcedetection/env
            - attributes/tag_ultra
            - batch
          exporters: [otlphttp]

        # --- BALANCED Profile Pipeline ---
        metrics/balanced:
          if: ${env:NR_USE_BALANCED:-true}
          receivers: [hostmetrics/balanced]
          processors:
            - memory_limiter
            - attributes/balanced_drop_long_cli
            - filter/balanced_idle_gate
            - resourcedetection
            - resourcedetection/cloud
            - resourcedetection/env
            - attributes/tag_balanced
            - batch
          exporters: [otlphttp]

        # --- OPTIMIZED Profile Pipeline ---
        metrics/optimized:
          if: ${env:NR_USE_OPTIMIZED:-false}
          receivers: [hostmetrics/optimized]
          processors:
            - memory_limiter
            - attributes/optim_drop_pid_and_cli
            - metricstransform/optim_aggregate_exe
            - filter/optim_idle_gate
            - resourcedetection
            - resourcedetection/cloud
            - resourcedetection/env
            - attributes/tag_optimized
            - batch
          exporters: [otlphttp]

        # --- LEAN Profile Pipeline ---
        metrics/lean:
          if: ${env:NR_USE_LEAN:-false}
          receivers: [hostmetrics/lean]
          processors:
            - memory_limiter
            - attributes/lean_micro_drop_pid_and_cli
            - metricstransform/lean_micro_aggregate_exe
            - filter/lean_micro_slo_value_gate
            - resourcedetection
            - resourcedetection/cloud
            - resourcedetection/env
            - attributes/tag_lean
            - batch
          exporters: [otlphttp]

        # --- MICRO Profile Pipeline ---
        metrics/micro:
          if: ${env:NR_USE_MICRO:-false}
          receivers: [hostmetrics/micro]
          processors:
            - memory_limiter
            - attributes/lean_micro_drop_pid_and_cli
            - metricstransform/lean_micro_aggregate_exe
            - filter/lean_micro_slo_value_gate
            - resourcedetection
            - resourcedetection/cloud
            - resourcedetection/env
            - attributes/tag_micro
            - batch
          exporters: [otlphttp]