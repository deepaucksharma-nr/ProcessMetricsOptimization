###############################################################################
# NRDOT 1.1.0 â€“ FIVE-PROFILE HOST-METRICS CONFIGURATION (PROCESS-FOCUSED) #
###############################################################################

extensions:
  health_check: {}

receivers:
  hostmetrics/ultra:
    collection_interval: 5s
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization: {enabled: true}
          system.cpu.time: {enabled: true}
      disk:
        metrics:
          system.disk.io: {enabled: true}
          system.disk.operations: {enabled: true}
          system.disk.io_time: {enabled: true}
          system.disk.operation.time: {enabled: true}
          system.disk.pending_operations: {enabled: true}
      filesystem:
        metrics:
          system.filesystem.usage: {enabled: true}
          system.filesystem.utilization: {enabled: true}
      load:
        metrics:
          system.cpu.load_average.1m: {enabled: true}
          system.cpu.load_average.5m: {enabled: true}
          system.cpu.load_average.15m: {enabled: true}
      memory:
        metrics:
          system.memory.usage: {enabled: true}
          system.memory.utilization: {enabled: true}
      network:
        metrics:
          system.network.connections: {enabled: true}
          system.network.dropped_packets: {enabled: true}
          system.network.errors: {enabled: true}
          system.network.io: {enabled: true}
          system.network.packets: {enabled: true}
      paging:
        metrics:
          system.paging.operations: {enabled: true}
          system.paging.usage: {enabled: true}
      process:
        metrics:
          process.cpu.time: {enabled: true}
          process.cpu.utilization: {enabled: true}
          process.memory.usage: {enabled: true}
          process.memory.virtual: {enabled: true}
          process.disk.io: {enabled: true}
          process.threads: {enabled: true}
          process.open_file_descriptors: {enabled: true}
          process.context_switches: {enabled: true}
          process.signals: {enabled: true}
          process.pagefaults: {enabled: true}
      processes: {}

  hostmetrics/balanced:
    collection_interval: 30s
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization: {enabled: true}
          system.cpu.time: {enabled: true}
      disk:
        metrics:
          system.disk.io: {enabled: true}
          system.disk.io_time: {enabled: true}
      filesystem:
        metrics:
          system.filesystem.usage: {enabled: true}
          system.filesystem.utilization: {enabled: true}
      load:
        metrics:
          system.cpu.load_average.1m: {enabled: true}
          system.cpu.load_average.5m: {enabled: true}
          system.cpu.load_average.15m: {enabled: true}
      memory:
        metrics:
          system.memory.usage: {enabled: true}
          system.memory.utilization: {enabled: true}
      network:
        metrics:
          system.network.io: {enabled: true}
          system.network.packets: {enabled: true}
      process:
        metrics:
          process.cpu.utilization: {enabled: true}
          process.memory.usage: {enabled: true}
        include:
          match_type: strict
          processes: ["*"]
          names: ["pid", "command", "exe_name"]

  hostmetrics/optimized:
    collection_interval: 60s
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization: {enabled: true}
      disk:
        metrics:
          system.disk.io: {enabled: true}
          system.disk.io_time: {enabled: true}
      filesystem:
        metrics:
          system.filesystem.utilization: {enabled: true}
      load:
        metrics:
          system.cpu.load_average.5m: {enabled: true}
          system.cpu.load_average.15m: {enabled: true}
      memory:
        metrics:
          system.memory.utilization: {enabled: true}
      network:
        metrics:
          system.network.io: {enabled: true}
      process:
        metrics:
          process.cpu.utilization: {enabled: true}
          process.memory.usage: {enabled: true}
        include:
          match_type: strict
          processes: ["*"]
          names: ["exe_name"]

  hostmetrics/lean:
    collection_interval: 120s
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization: {enabled: true}
      memory:
        metrics:
          system.memory.utilization: {enabled: true}
      disk:
        metrics:
          system.disk.io_time: {enabled: true}
      filesystem:
        metrics:
          system.filesystem.utilization: {enabled: true}
      load:
        metrics:
          system.cpu.load_average.15m: {enabled: true}
      process:
        metrics:
          process.cpu.utilization:
            enabled: true
            report_per_cpu: false
          process.memory.usage: {enabled: true}
        include:
          match_type: strict
          processes: ["*"]
          names: ["exe_name"]
        exclude:
          match_type: regexp
          names:
            - ".*kernel.*"
            - ".*chrome.*helper.*"
            - ".*plugin.*"

  hostmetrics/micro:
    collection_interval: 300s
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization: {enabled: true}
      memory:
        metrics:
          system.memory.utilization: {enabled: true}
      disk:
        metrics:
          system.disk.io_time: {enabled: true}
      filesystem:
        metrics:
          system.filesystem.utilization: {enabled: true}
      load:
        metrics:
          system.cpu.load_average.15m: {enabled: true}
      # Micro profile focuses on system-level metrics
      # No process scraper to minimize data volume

processors:
  memory_limiter:
    check_interval: 1s
    limit_mib: ${env:MEM_LIMIT_MIB:-256}

  resourcedetection:
    detectors: ["system"]
    system:
      hostname_sources: ["os"]

  batch:
    send_batch_size: 1000
    timeout: 10s

  filter/process:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - process\\..*
          - system\\..*

  # Transform metrics for optimized profile
  metricstransform/optimized:
    transforms:
      # Aggregate process CPU metrics by executable
      - include: process.cpu.utilization
        action: update
        operations:
          - action: aggregate_labels
            label_set: ["exe_name", "host.name", "os.type"]
            aggregation_type: sum

      # Aggregate process memory metrics by executable
      - include: process.memory.usage
        action: update
        operations:
          - action: aggregate_labels
            label_set: ["exe_name", "host.name", "os.type"]
            aggregation_type: sum

  # Transform matched metrics using metricstransform processor for lean profile
  metricstransform/lean:
    transforms:
      # Aggregate process CPU metrics by executable with higher thresholds
      - include: process.cpu.utilization
        action: update
        operations:
          - action: aggregate_labels
            label_set: ["exe_name", "host.name", "os.type"]
            aggregation_type: sum

      # Aggregate process memory metrics by executable with higher thresholds
      - include: process.memory.usage
        action: update
        operations:
          - action: aggregate_labels
            label_set: ["exe_name", "host.name", "os.type"]
            aggregation_type: sum

  attributes/ultra:
    actions:
      - key: benchmark.profile
        value: "ultra"
        action: upsert
      - key: benchmark.demo_id
        value: ${env:DEMO_ID:-demo-default}
        action: upsert
      - key: benchmark.collection_interval
        value: "5s"
        action: upsert

  attributes/balanced:
    actions:
      - key: benchmark.profile
        value: "balanced"
        action: upsert
      - key: benchmark.demo_id
        value: ${env:DEMO_ID:-demo-default}
        action: upsert
      - key: benchmark.collection_interval
        value: "30s"
        action: upsert

  attributes/optimized:
    actions:
      - key: benchmark.profile
        value: "optimized"
        action: upsert
      - key: benchmark.demo_id
        value: ${env:DEMO_ID:-demo-default}
        action: upsert
      - key: benchmark.collection_interval
        value: "60s"
        action: upsert

  attributes/lean:
    actions:
      - key: benchmark.profile
        value: "lean"
        action: upsert
      - key: benchmark.demo_id
        value: ${env:DEMO_ID:-demo-default}
        action: upsert
      - key: benchmark.collection_interval
        value: "120s"
        action: upsert

  attributes/micro:
    actions:
      - key: benchmark.profile
        value: "micro"
        action: upsert
      - key: benchmark.demo_id
        value: ${env:DEMO_ID:-demo-default}
        action: upsert
      - key: benchmark.collection_interval
        value: "300s"
        action: upsert

exporters:
  otlphttp:
    endpoint: ${env:OTEL_EXPORTER_OTLP_ENDPOINT:-https://otlp.nr-data.net}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: ${env:OTEL_EXPORTER_OTLP_COMPRESSION:-zstd}

service:
  extensions: [health_check]
  pipelines:
    metrics/ultra:
      receivers: [hostmetrics/ultra]
      processors:
        - memory_limiter
        - resourcedetection
        - filter/process
        - attributes/ultra
        - batch
      exporters: [otlphttp]
      # This pipeline is enabled only when NR_USE_ULTRA=true
      enabled: ${env:NR_USE_ULTRA:-false}

    metrics/balanced:
      receivers: [hostmetrics/balanced]
      processors:
        - memory_limiter
        - resourcedetection
        - filter/process
        - attributes/balanced
        - batch
      exporters: [otlphttp]
      # This pipeline is enabled only when NR_USE_BALANCED=true
      enabled: ${env:NR_USE_BALANCED:-false}

    metrics/optimized:
      receivers: [hostmetrics/optimized]
      processors:
        - memory_limiter
        - resourcedetection
        - filter/process
        - metricstransform/optimized
        - attributes/optimized
        - batch
      exporters: [otlphttp]
      # This pipeline is enabled only when NR_USE_OPTIMIZED=true
      enabled: ${env:NR_USE_OPTIMIZED:-false}

    metrics/lean:
      receivers: [hostmetrics/lean]
      processors:
        - memory_limiter
        - resourcedetection
        - filter/process
        - metricstransform/lean
        - attributes/lean
        - batch
      exporters: [otlphttp]
      # This pipeline is enabled only when NR_USE_LEAN=true
      enabled: ${env:NR_USE_LEAN:-false}

    metrics/micro:
      receivers: [hostmetrics/micro]
      processors:
        - memory_limiter
        - resourcedetection
        - filter/process
        - attributes/micro
        - batch
      exporters: [otlphttp]
      # This pipeline is enabled only when NR_USE_MICRO=true
      enabled: ${env:NR_USE_MICRO:-false}
