###############################################################################
# NRDOT 1.1.0 – FIVE-PROFILE HOST-METRICS CONFIGURATION (PROCESS-FOCUSED)   #
#-----------------------------------------------------------------------------#
# Profiles: ULTRA, BALANCED, OPTIMIZED, LEAN, MICRO                         #
# This config focuses *only* on controlling process.* metrics via profiles.   #
# For full host monitoring, ensure system scrapers (cpu, disk, etc.) are    #
# enabled in a base receiver or a separate pipeline if desired.             #
# Here, 'processes' scraper (system.processes.*) is included for context.   #
###############################################################################

extensions:
  health_check: {}
  # For lab/debug:
  # pprof: {}
  # zpages: {}
  # prometheus: {endpoint: "0.0.0.0:8888"}


###############################################################################
# 1.  RECEIVERS – Separate hostmetrics block per profile interval/config      #
###############################################################################

# --- Reusable metric scraper configurations using YAML Anchors ---
_process_metrics_full_detail: &process_metrics_full_detail # For ULTRA
  metrics:
    process.cpu.utilization:     {enabled: true}
    process.cpu.time:            {enabled: true}
    process.memory.usage:        {enabled: true} # RSS
    process.memory.utilization:  {enabled: true}
    process.disk.io:             {enabled: true}
    process.disk.operations:     {enabled: true}
    process.disk.operation_time: {enabled: true}
    process.threads:             {enabled: true}
    process.open_fds:            {enabled: true}
    # Add others from the 9 if desired for ULTRA, like context_switches, page_faults, signals
    # process.context_switches:    {enabled: true}
    # process.page_faults:         {enabled: true}

_process_metrics_core_no_noisy_types: &process_metrics_core_no_noisy_types # For BALANCED, OPTIMIZED
  metrics:
    process.cpu.utilization:     {enabled: true}
    process.memory.usage:        {enabled: true}
    # Noisy types (threads, FDs) are explicitly disabled at scrape time for efficiency.
    process.threads:             {enabled: false}
    process.open_fds:            {enabled: false}
    # Other specific process metrics are implicitly disabled by not listing them as enabled.

_process_metrics_minimal_cpu_rss: &process_metrics_minimal_cpu_rss # For LEAN, MICRO
  metrics:
    process.cpu.utilization:     {enabled: true} # Keep CPU %
    process.memory.usage:        {enabled: true} # Keep RSS MB
    # All other process.* metrics are implicitly disabled.

receivers:
  # --- Shared system metrics receiver (optional, if you want system metrics always on) ---
  # hostmetrics_system_base:
  #   root_path: ${env:HOST_ROOT_PATH:-/hostfs}
  #   collection_interval: 60s # Or configurable
  #   scrapers:
  #     cpu: {}
  #     memory: {}
  #     disk: {}
  #     filesystem: {}
  #     network: {}
  #     load: {}
  #     paging: {}
      # NO process or processes scrapers here

  # --- ULTRA Profile Receiver (5s, full process detail) ---
  hostmetrics/ultra:
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    collection_interval: 5s
    scrapers:
      process:   {<<: *process_metrics_full_detail}
      processes: {} # system.processes.* counts

  # --- BALANCED Profile Receiver (30s, core process types) ---
  hostmetrics/balanced:
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    collection_interval: 30s
    scrapers:
      process:   {<<: *process_metrics_core_no_noisy_types}
      processes: {}

  # --- OPTIMIZED Profile Receiver (60s, core process types) ---
  hostmetrics/optimized:
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    collection_interval: 60s
    scrapers:
      process:   {<<: *process_metrics_core_no_noisy_types}
      processes: {}

  # --- LEAN Profile Receiver (120s, minimal CPU % & RSS only) ---
  hostmetrics/lean:
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    collection_interval: 120s
    scrapers:
      process:
        <<: *process_metrics_minimal_cpu_rss
        include: {match_type: regexp, names: [".*"]} # Keep all execs by name initially
        exclude: {match_type: regexp, names: ["$^"]}  # Drop none by name initially
      processes: {}

  # --- MICRO Profile Receiver (300s, minimal CPU % & RSS only) ---
  hostmetrics/micro:
    root_path: ${env:HOST_ROOT_PATH:-/hostfs}
    collection_interval: 300s
    scrapers:
      process:
        <<: *process_metrics_minimal_cpu_rss
        include: {match_type: regexp, names: [".*"]}
        exclude: {match_type: regexp, names: ["$^"]}
      processes: {}

###############################################################################
# 2.  PROCESSORS – Shared base + profile-specific stacks                    #
###############################################################################
processors:
  # --- SHARED BASE PROCESSORS (used by all active pipelines) ---
  memory_limiter:
    limit_mib: ${env:MEM_LIMIT_MIB:-100}
    check_interval: 1s

  resourcedetection:
    detectors: ["system"]
    system: {hostname_sources:["os"]}

  resourcedetection/cloud:
    detectors: ["gcp", "ec2", "azure"]
    timeout: 2s

  resourcedetection/env: # For OTEL_RESOURCE_ATTRIBUTES overrides
    detectors: ["env"]
    timeout: 2s
    override: true

  batch: {} # Standard batching for export efficiency

  # --- PROCESSOR: TAGGING (Applied by each pipeline to identify its data) ---
  attributes/tag_ultra:
    actions: [{key: benchmark.profile, value: ultra, action: upsert}, {key: benchmark.demo_id, value: ${env:DEMO_ID:-default_demo}, action: upsert}]
  attributes/tag_balanced:
    actions: [{key: benchmark.profile, value: balanced, action: upsert}, {key: benchmark.demo_id, value: ${env:DEMO_ID:-default_demo}, action: upsert}]
  attributes/tag_optimized:
    actions: [{key: benchmark.profile, value: optimized, action: upsert}, {key: benchmark.demo_id, value: ${env:DEMO_ID:-default_demo}, action: upsert}]
  attributes/tag_lean:
    actions: [{key: benchmark.profile, value: lean, action: upsert}, {key: benchmark.demo_id, value: ${env:DEMO_ID:-default_demo}, action: upsert}]
  attributes/tag_micro:
    actions: [{key: benchmark.profile, value: micro, action: upsert}, {key: benchmark.demo_id, value: ${env:DEMO_ID:-default_demo}, action: upsert}]

  # --- PROCESSORS: BALANCED Profile Stack ---
  # Metric type suppression for threads/FDs is done in hostmetrics/balanced receiver.
  attributes/balanced_drop_long_cli:
    actions:
      - {key: process.command_line, action: delete}
      # process.pid is *kept* for BALANCED profile.

  filter/balanced_idle_gate:
    metrics:
      datapoint:
        - 'metric.name == "process.cpu.utilization" and value_double < ${env:IDLE_CPU_THRESHOLD:-0.005}'
        - 'metric.name == "process.memory.usage"    and value_int   < ${env:IDLE_RSS_THRESHOLD:-31457280}'

  # --- PROCESSORS: OPTIMIZED Profile Stack ---
  attributes/optim_drop_pid_and_cli: # Combined for OPTIMIZED
    actions:
      - {key: process.pid, action: delete}
      - {key: process.command_line, action: delete}

  metricstransform/optim_aggregate_exe:
    transforms:
      - include: ^process\..*
        match_type: regexp
        action: update
        operations:
          - action: aggregate_labels
            label_set: [process.executable.name] # Consider adding host.name
            aggregation_type: sum

  filter/optim_idle_gate: # Can use same env vars as BALANCED or dedicated ones
    metrics:
      datapoint:
        - 'metric.name == "process.cpu.utilization" and value_double < ${env:IDLE_CPU_THRESHOLD:-0.005}'
        - 'metric.name == "process.memory.usage"    and value_int   < ${env:IDLE_RSS_THRESHOLD:-31457280}'

  # --- PROCESSORS: LEAN & MICRO Profile Stack (Shared Logic) ---
  attributes/lean_micro_drop_pid_and_cli:
    actions:
      - {key: process.pid,           action: delete}
      - {key: process.command_line,  action: delete}

  metricstransform/lean_micro_aggregate_exe:
    transforms:
      - include: ^process\..*
        match_type: regexp
        action: update
        operations:
          - action: aggregate_labels
            label_set: [process.executable.name] # Consider adding host.name
            aggregation_type: sum

  filter/lean_micro_slo_value_gate:
    metrics:
      datapoint:
        - 'metric.name == "process.cpu.utilization" and value_double < ${env:IDLE_CPU_THRESHOLD_LEAN_MICRO:-0.05}'
        - 'metric.name == "process.memory.usage"    and value_int   < ${env:IDLE_RSS_THRESHOLD_LEAN_MICRO:-52428800}'

###############################################################################
# 3.  EXPORTER – Single HTTP endpoint, compression & delta temporality via ENV
###############################################################################
exporters:
  otlphttp:
    endpoint: ${env:OTEL_EXPORTER_OTLP_ENDPOINT:-https://otlp.nr-data.net}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: ${env:OTEL_EXPORTER_OTLP_COMPRESSION:-zstd}
    # For temporality, rely on global OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=delta
    # This makes cumulativetodelta processor redundant if SDKs/receivers send cumulative counters.

###############################################################################
# 4.  PIPELINES – Gated by NR_USE_* environment variables (using OTel v0.86+ 'if:' syntax)
###############################################################################
service:
  pipelines:
    # --- Optional: Base system metrics pipeline (always on, separate from process profiles) ---
    # metrics/system:
    #   receivers: [hostmetrics_system_base] # If defined above
    #   processors: [memory_limiter, resourcedetection, resourcedetection/cloud, resourcedetection/env, batch]
    #   exporters: [otlphttp]

    # ---------- ULTRA (Full Fidelity, 5s interval) ----------
    metrics/ultra:
      if: ${env:NR_USE_ULTRA:-false} # Default to false
      receivers:  [hostmetrics/ultra]
      processors: [memory_limiter,
                   resourcedetection, resourcedetection/cloud, resourcedetection/env,
                   attributes/tag_ultra,
                   batch]
      exporters:  [otlphttp]

    # ---------- BALANCED (PID-Aware, 30s interval) --------
    metrics/balanced:
      if: ${env:NR_USE_BALANCED:-true} # Default to true
      receivers:  [hostmetrics/balanced]
      processors: [memory_limiter,
                   attributes/balanced_drop_long_cli,
                   filter/balanced_idle_gate,
                   resourcedetection, resourcedetection/cloud, resourcedetection/env,
                   attributes/tag_balanced,
                   batch]
      exporters:  [otlphttp]

    # ---------- OPTIMIZED (Executable-Aggregated, 60s interval) ---
    metrics/optimized:
      if: ${env:NR_USE_OPTIMIZED:-false} # Default to false
      receivers:  [hostmetrics/optimized]
      processors: [memory_limiter,
                   attributes/optim_drop_pid_and_cli, # Combined drop for OPTIMIZED
                   metricstransform/optim_aggregate_exe,
                   filter/optim_idle_gate,
                   resourcedetection, resourcedetection/cloud, resourcedetection/env,
                   attributes/tag_optimized,
                   batch]
      exporters:  [otlphttp]

    # ---------- LEAN (SLO-focused Aggregated, 120s interval) ---
    metrics/lean:
      if: ${env:NR_USE_LEAN:-false} # Default to false
      receivers:  [hostmetrics/lean]
      processors: [memory_limiter,
                   attributes/lean_micro_drop_pid_and_cli, # Shared logic
                   metricstransform/lean_micro_aggregate_exe, # Shared logic
                   filter/lean_micro_slo_value_gate, # Shared logic
                   resourcedetection, resourcedetection/cloud, resourcedetection/env,
                   attributes/tag_lean,
                   batch]
      exporters:  [otlphttp]

    # ---------- MICRO (Minimal SLO Aggregated, 300s interval) ---
    metrics/micro:
      if: ${env:NR_USE_MICRO:-false} # Default to false
      receivers:  [hostmetrics/micro]
      processors: [memory_limiter,
                   attributes/lean_micro_drop_pid_and_cli, # Shared logic
                   metricstransform/lean_micro_aggregate_exe, # Shared logic
                   filter/lean_micro_slo_value_gate, # Shared logic
                   resourcedetection, resourcedetection/cloud, resourcedetection/env,
                   attributes/tag_micro,
                   batch]
      exporters:  [otlphttp]

  extensions: [health_check] # , pprof, zpages, prometheus] # Add other extensions if needed & available