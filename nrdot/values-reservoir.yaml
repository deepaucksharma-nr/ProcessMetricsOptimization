# NRDOT Helm chart values for trace-aware reservoir sampler
# Use with: helm upgrade --install nrdot newrelic/nrdot-collector -f values-reservoir.yaml

# Specify the custom image with reservoir sampler included
image:
  repository: "your-registry/nrdot-reservoir-sampler"
  tag: "v0.1.0"
  pullPolicy: IfNotPresent

# Enable persistent storage for the reservoir sampler's checkpoint file
persistence:
  enabled: true
  size: 1Gi
  # Use a StorageClass suitable for your environment
  storageClassName: "standard"
  # Mount path for checkpoint files
  mountPath: "/var/otelpersist"

# Configure additional options for the collector
config:
  # New Relic license key - you can also specify this with --set licenseKey=YOUR_KEY
  # licenseKey: "YOUR_NEW_RELIC_LICENSE_KEY"
  
  # OpenTelemetry Collector configuration
  # This overrides the default configuration provided by the chart
  collector:
    configOverride:
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
        pprof:
          endpoint: 0.0.0.0:1777
        memory_ballast:
          size_mib: 683
        # Needed for checkpoint persistence
        file_storage:
          directory: /var/otelpersist

      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318

      processors:
        batch:
          send_batch_size: 1000
          timeout: 10s
          
        memory_limiter:
          check_interval: 1s
          limit_percentage: 80
          spike_limit_percentage: 25

        # Configure the reservoir sampler
        reservoir_sampler:
          size_k: 5000
          window_duration: 60s
          # Path must be inside the persistent volume mount
          checkpoint_path: /var/otelpersist/reservoir.db
          checkpoint_interval: 10s
          trace_aware: true
          trace_buffer_max_size: 100000
          trace_buffer_timeout: 10s
          db_compaction_schedule_cron: "0 0 * * *"  # Daily at midnight
          db_compaction_target_size: 104857600  # 100MB

      # Standard New Relic OTLP exporter configuration 
      exporters:
        otlphttp/newrelic:
          endpoint: "https://otlp.nr-data.net:4318"
          headers:
            api-key: ${NEW_RELIC_LICENSE_KEY}

      service:
        # Include file_storage extension for persistent storage
        extensions: [health_check, pprof, memory_ballast, file_storage]
        
        # Configure the processing pipeline
        pipelines:
          traces:
            receivers: [otlp]
            # Insert reservoir_sampler in the pipeline (after batch is recommended)
            processors: [memory_limiter, batch, reservoir_sampler]
            exporters: [otlphttp/newrelic]

# Resources for the collector pods
resources:
  limits:
    cpu: 2
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Pod security context for file permissions
podSecurityContext:
  fsGroup: 10001  # Must match the user the collector runs as

# Configure autoscaling based on CPU usage
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

# Add annotations for Prometheus metrics scraping
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8888"
  prometheus.io/path: "/metrics"

# Configure pod affinity for high availability
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - nrdot-collector
        topologyKey: "kubernetes.io/hostname"

# Add liveness and readiness probes
livenessProbe:
  httpGet:
    path: /
    port: 13133
  initialDelaySeconds: 10
  periodSeconds: 30
readinessProbe:
  httpGet:
    path: /
    port: 13133
  initialDelaySeconds: 10
  periodSeconds: 30

# Configure priority class for the collector
priorityClassName: "high-priority"

# Environment configuration
env:
  # Add any additional environment variables here
  - name: GOGC
    value: "80"  # Adjust garbage collection for better memory usage

# For highly durable checkpoints, configure PVC with appropriate storageClass 
# This depends on your Kubernetes environment
persistentVolumeClaim:
  annotations:
    volume.beta.kubernetes.io/storage-class: "premium-rwo"