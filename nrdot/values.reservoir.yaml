# NR-DOT Helm values for trace-aware reservoir sampling
# Reference: https://github.com/newrelic/helm-charts/tree/master/charts/nrdot-collector

# Point Helm to your custom image with reservoir sampler included
image:
  repository: ghcr.io/your-org/nrdot-reservoir
  tag: v0.1.0
  pullPolicy: IfNotPresent

# CRITICAL: Enable persistence for the reservoir sampler's checkpoint file
# This uses the standard PVC mounted at /var/otelpersist in NR-DOT
persistence:
  enabled: true
  size: 1Gi

# Override the collector configuration to include the reservoir sampler
collector:
  configOverride:
    # Add your reservoir sampler configuration
    processors:
      reservoir_sampler:
        size_k: 5000
        window_duration: "60s"
        # The path MUST be in the standard NR-DOT persistence mount
        checkpoint_path: "/var/otelpersist/reservoir.db"
        checkpoint_interval: "10s"
        trace_aware: true
        trace_buffer_max_size: 100000
        trace_buffer_timeout: "30s"
        db_compaction_schedule_cron: "0 2 * * 0" # Weekly @ 2 AM Sunday

    # Standard NR-DOT extensions, including file_storage for persistence
    service:
      # File storage extension is needed for BoltDB checkpoint persistence
      extensions: [health_check, pprof, memory_ballast, file_storage]
      
      # Configure the pipeline with the reservoir sampler
      # Insert after batch for optimal processing order
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch, reservoir_sampler]
          exporters: [otlphttp/newrelic]

# Resources appropriate for the reservoir sampler's memory requirements
resources:
  limits:
    cpu: 2
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Ensure the NR-DOT pod has correct permissions for PV access
podSecurityContext:
  fsGroup: 10001  # Must match the user the collector runs as

# Add annotations for metrics scraping
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8888"
  prometheus.io/path: "/metrics"

# Configure liveness/readiness probes
livenessProbe:
  httpGet:
    path: /
    port: 13133
  initialDelaySeconds: 10
  periodSeconds: 30

readinessProbe:
  httpGet:
    path: /
    port: 13133
  initialDelaySeconds: 10
  periodSeconds: 30

# Optionally add tolerations for specific nodes
tolerations: []
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"

# Configure affinity for high availability
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - nrdot-collector
        topologyKey: "kubernetes.io/hostname"