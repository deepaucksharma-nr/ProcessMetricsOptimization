version: "3"
services:
  # OpenTelemetry Collector with trace-aware reservoir sampling
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel/config.yaml"]
    volumes:
      - ./config.yaml:/etc/otel/config.yaml
      - ./data:/var/otelpersist
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Metrics
      - "13133:13133" # Health
    environment:
      - RESERVOIR_SIZE_K=5000
      - RESERVOIR_WINDOW_DURATION=60s
      - RESERVOIR_CHECKPOINT_INTERVAL=10s

  # Sample application that generates traces
  sample-app:
    image: golang:1.21
    volumes:
      - ./app:/app
    working_dir: /app
    command: go run main.go
    depends_on:
      - otel-collector
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=sample-app,service.version=1.0.0,deployment.environment=demo
      - OTEL_TRACES_SAMPLER=always_on

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

volumes:
  data: